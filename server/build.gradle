plugins {
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.21'

    id 'jacoco'
}

apply plugin: 'io.spring.dependency-management'

group = 'io.github.titaniumcoder'
version = '1.0.0'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Stuff
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.springframework.retry:spring-retry'

    runtimeOnly 'org.springframework.boot:spring-boot-devtools'

    // Kotlin Stuff
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.1.1'

    // Poi for Excel Creation
    implementation 'org.apache.poi:poi-ooxml:4.0.1'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude module: 'junit'
    }

    // Testing needs
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // JUnit 5 as well as mocking
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'io.mockk:mockk:1.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exc")

    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled = true
        html.destination file("${buildDir}/reports/jacocoHtml")
    }
}

check.dependsOn(jacocoTestReport)

test {
    useJUnitPlatform()
}

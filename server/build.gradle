buildscript {
    dependencies {
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.21"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
    id "org.jetbrains.kotlin.plugin.allopen"
    id "com.github.johnrengelman.shadow"
    id "application"

    id 'nu.studer.jooq' version '3.0.3'
    id "org.flywaydb.flyway" version "6.1.3"
}

group "toggl.reporting.micronaut"

ext {
    postgresqlVersion = '42.2.9'
}

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"

    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-management"
    implementation "io.micronaut:micronaut-security-jwt"
    implementation 'io.micronaut.configuration:micronaut-flyway'
    implementation 'io.micronaut.configuration:micronaut-jooq'

    runtime 'io.micronaut.configuration:micronaut-jdbc-hikari'

    runtime "org.postgresql:postgresql:$postgresqlVersion"
    jooqRuntime "org.postgresql:postgresql:$postgresqlVersion"

    implementation("org.apache.poi:poi-ooxml:4.1.0")

    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kapt "io.micronaut:micronaut-security"

    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"

    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.micronaut.test:micronaut-test-kotlintest"
    testImplementation "io.mockk:mockk:1.9.3"

    testImplementation "io.kotlintest:kotlintest-runner-junit5:3.3.2"

    testImplementation "io.kotlintest:kotlintest-assertions-json:3.3.2"

    // Fast Restarts on Mac
    developmentOnly "io.micronaut:micronaut-runtime-osx:$micronautVersion"
    // TODO shouldn't that be in the micronaut platform?
    developmentOnly "net.java.dev.jna:jna:5.5.0"
    developmentOnly "io.methvin:directory-watcher:0.9.6"
}

test.classpath += configurations.developmentOnly

mainClassName = "io.github.titaniumcoder.reporting.Application"

test {
    useJUnitPlatform()
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

flyway {
    url = 'jdbc:postgresql://db:5432/reporting'
    user = 'reporting'
}

jooq {
    reporting(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://db:5432/reporting'
            user = 'reporting'
        }

        generator {
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
                forcedTypes {

                }
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = false
                fluentSetters = true
                javaTimeTypes = true
            }
            target {
                packageName = 'io.github.titaniumcoder.reporting'
            }
        }
    }
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

generateReportingJooqSchemaSource.dependsOn(flywayMigrate)
compileKotlin.dependsOn(generateReportingJooqSchemaSource)
